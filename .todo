# üéØ TODO - Valorant Ascension Next

> **Status do Projeto**: Em desenvolvimento ativo  
> **√öltima atualiza√ß√£o**: 8 de setembro de 2025  
> **Arquitetura**: Next.js 15 + TypeScript + Prisma + PostgreSQL + Stripe

---

## üìä OVERVIEW DO PROJETO

### ‚úÖ CONCLU√çDO (Funda√ß√£o S√≥lida)
- [x] **Configura√ß√£o Base**: Next.js 15 + TypeScript + Tailwind + SCSS Modules
- [x] **Banco de Dados**: Schema Prisma completo com 20+ modelos
- [x] **Autentica√ß√£o**: Auth.js configurado com sess√µes e middleware
- [x] **UI/UX**: 37+ componentes reutiliz√°veis + shadcn/ui + design responsivo
- [x] **Pagamentos**: Integra√ß√£o Stripe com webhooks e assinaturas
- [x] **P√°ginas Principais**: Home, Cursos, Community, Pre√ßos, Auth (6 fluxos)
- [x] **API Routes**: 10+ endpoints para auth, pagamentos, dados Valorant
- [x] **DevOps**: Scripts Prisma para dev/prod, valida√ß√£o de env
- [x] **Documenta√ß√£o**: README detalhado + guias Prisma + regras do projeto

### üöß EM PROGRESSO
- [ ] **Sistema de Aulas**: Videoconfer√™ncia e progresso do usu√°rio
- [ ] **Dashboard Admin**: CRUD completo para cursos/aulas/usu√°rios  
- [ ] **Integra√ß√£o Valorant API**: Match analysis e MMR tracking

---

## üéØ ROADMAP POR PRIORIDADE

## üî• ALTA PRIORIDADE (Pr√≥ximas 2 semanas)

### 1Ô∏è‚É£ SISTEMA DE AUTENTICA√á√ÉO & AUTORIZA√á√ÉO
- [ ] **Middleware de Roles**: 
  - [x] Implementar verifica√ß√£o RBAC (ADMIN, CUSTOMER, PROFESSIONAL)
  - [x] Proteger rotas sens√≠veis (/dashboard, /admin)
  - [ ] Guards para Server Actions por role
- [x] **Recupera√ß√£o de Senha**:
  - [x] Finalizar fluxo reset-password (envio + valida√ß√£o)
  - [x] Templates de email profissionais (Resend)
- [ ] **Verifica√ß√£o de Email**:
  - [ ] Completar verify-email workflow
  - [ ] Estados de ativa√ß√£o de conta

### 2Ô∏è‚É£ DASHBOARD ADMINISTRATIVO
- [ ] **Dashboard Layout**:
  - [x] Criar `/src/app/dashboard/layout.tsx` com sidebar
  - [x] Menu lateral responsivo com navega√ß√£o
  - [ ] Breadcrumbs e estado ativo
- [ ] **Gest√£o de Usu√°rios**:
  - [ ] `/dashboard/users` - Listagem com filtros
  - [ ] CRUD completo: create, edit, deactivate, promote roles
  - [ ] Bulk actions (aprovar, remover, notificar)
- [ ] **Gest√£o de Cursos**:
  - [ ] `/dashboard/courses` - Interface para lessonCategory
  - [ ] Criar/editar categorias com upload de √≠cones
  - [ ] Preview de cards antes de publicar
- [ ] **Gest√£o de Aulas**:
  - [ ] `/dashboard/lessons` - CRUD para lessons
  - [ ] Upload de v√≠deos (YouTube/Vimeo integration)
  - [ ] Agendamento de aulas ao vivo
  - [ ] Sistema de aprova√ß√£o para instrutores

### 3Ô∏è‚É£ SISTEMA DE AULAS (CORE FEATURE)
- [ ] **Player de V√≠deo**:
  - [ ] Integrar VideoPlayer.tsx com controles personalizados
  - [ ] Save/resume progress por usu√°rio
  - [ ] Velocidade, legendas, qualidade
- [ ] **Tracking de Progresso**:
  - [ ] Implementar lessonProgress com % completion
  - [ ] Certificados autom√°ticos ao completar curso
  - [ ] Dashboard do aluno com estat√≠sticas
- [ ] **Sistema de Coment√°rios**:
  - [ ] Interface para lessonComments
  - [ ] Replies, likes, modera√ß√£o
  - [ ] Notifica√ß√µes em tempo real
- [ ] **Aulas ao Vivo**:
  - [ ] Integra√ß√£o WebRTC ou Twitch/YouTube Live
  - [ ] Chat em tempo real durante streams
  - [ ] Grava√ß√£o autom√°tica para replay

---

## üü° M√âDIA PRIORIDADE (Pr√≥ximo m√™s)

### 4Ô∏è‚É£ P√ÅGINAS DE VALORANT ESPEC√çFICAS
- [ ] **Agentes (/agents)**:
  - [ ] P√°gina listagem com filtro por role
  - [ ] `/agents/[slug]` - Detalhes com skills e strategies
  - [ ] Favoritos do usu√°rio
- [ ] **Mapas (/maps)**:
  - [ ] Grid de mapas com preview
  - [ ] `/maps/[slug]` - Callouts interativos
  - [ ] Dicas por site (A/B/C, Mid)
- [ ] **An√°lise de Partidas (/match)**:
  - [ ] Melhorar `/match/[matchId]` existente
  - [ ] Gr√°ficos de performance
  - [ ] Compara√ß√£o com outros ranks

### 5Ô∏è‚É£ MELHORIAS DE UX
- [ ] **Loading States**:
  - [ ] Usar componentes Skeleton existentes consistentemente
  - [ ] Progressive loading para listas longas
  - [ ] Error boundaries personalizados
- [ ] **Busca Global**:
  - [ ] Implementar busca por aulas, agentes, mapas
  - [ ] Filtros avan√ßados
  - [ ] Hist√≥rico de buscas
- [ ] **Favoritos & Bookmarks**:
  - [ ] Sistema de favoritos para aulas/agentes
  - [ ] Lista "Assistir mais tarde"
  - [ ] Exportar progresso

### 6Ô∏è‚É£ NOTIFICA√á√ïES & COMUNICA√á√ÉO
- [ ] **Sistema de Notifica√ß√µes**:
  - [ ] In-app notifications (novas aulas, coment√°rios)
  - [ ] Push notifications (opcional)
  - [ ] Prefer√™ncias de notifica√ß√£o por usu√°rio
- [ ] **Newsletter**:
  - [ ] Opt-in durante cadastro
  - [ ] Templates para updates semanais
  - [ ] Segmenta√ß√£o por n√≠vel/interesse

---

## üü¢ BAIXA PRIORIDADE (Futuro)

### 7Ô∏è‚É£ FEATURES AVAN√áADAS
- [ ] **Conquistas (Achievements)**:
  - [ ] Implementar userAchievements
  - [ ] Badges visuais no perfil
  - [ ] Sistema de XP/pontos
- [ ] **Social Features**:
  - [ ] Perfis p√∫blicos de usu√°rios
  - [ ] Follow/followers entre usuarios
  - [ ] Feed de atividades
- [ ] **Gamifica√ß√£o**:
  - [ ] Leaderboards por progresso
  - [ ] Streaks de estudo
  - [ ] Torneios internos

### 8Ô∏è‚É£ INTEGRA√á√ïES EXTERNAS
- [ ] **Discord Bot**:
  - [ ] Notifica√ß√µes de novas aulas
  - [ ] Status de progresso dos membros
  - [ ] Comandos de consulta
- [ ] **Valorant API Avan√ßada**:
  - [ ] Auto-import de partidas via henrik API
  - [ ] An√°lise autom√°tica de performance
  - [ ] Sugest√µes personalizadas de melhoria

---

## üõ†Ô∏è TAREFAS T√âCNICAS

### ARQUITETURA & CODE QUALITY
- [ ] **Cria√ß√£o de .env.example**:
  - [ ] Documentar todas as vari√°veis necess√°rias
  - [ ] Valores exemplo para development
- [ ] **Server Actions**:
  - [ ] Implementar actions faltando (CRUD completo)
  - [ ] Valida√ß√£o zod em todas as actions
  - [ ] Error handling consistente
- [ ] **Testes**:
  - [ ] Unit tests para utils e hooks
  - [ ] Integration tests para API routes
  - [ ] E2E tests para fluxos cr√≠ticos (auth, payment)
- [ ] **Performance**:
  - [ ] Lazy loading para componentes pesados
  - [ ] Image optimization (next/image)
  - [ ] Bundle analysis e code splitting

### DATABASE & MIGRATIONS
- [ ] **Seeds Completos**:
  - [ ] Seed para agentRoles, agents com dados reais
  - [ ] Seed para maps com callouts b√°sicos
  - [ ] Seed para lessonCategories e lessons exemplo
- [ ] **Migrations Faltando**:
  - [ ] Indexes para queries frequentes
  - [ ] Constraints de integridade
  - [ ] Triggers para auditing (opcional)

### SEGURAN√áA
- [ ] **Rate Limiting**:
  - [ ] Implementar em API routes cr√≠ticas
  - [ ] Protection contra spam de coment√°rios
- [ ] **Sanitiza√ß√£o**:
  - [ ] Input sanitization em formul√°rios
  - [ ] XSS protection em comments
- [ ] **Audit Logs**:
  - [ ] Log de a√ß√µes administrativas
  - [ ] Monitoramento de tentativas de acesso

---

## üìã CHECKLIST DE DEPLOY

### PR√â-PRODU√á√ÉO
- [x] **Environment Variables**:
  - [x] Configurar todas as env vars na Vercel
  - [x] Testar Stripe em modo live
  - [x] Configurar DATABASE_URL e DIRECT_URL
- [ ] **Database**:
  - [ ] Deploy migrations na Neon
  - [ ] Run seeds em produ√ß√£o
  - [ ] Backup strategy
- [ ] **Monitoring**:
  - [ ] Setup Vercel Analytics
  - [ ] Error tracking (Sentry opcional)
  - [ ] Performance monitoring

### P√ìS-DEPLOY
- [ ] **Content**:
  - [ ] Criar primeiras aulas demonstrativas
  - [ ] Upload de assets (imagens, v√≠deos)
  - [x] Configurar produtos Stripe
- [ ] **SEO**:
  - [ ] Meta tags otimizadas
  - [ ] Sitemap.xml
  - [ ] robots.txt
- [ ] **Legal**:
  - [ ] Pol√≠tica de Privacidade
  - [ ] Termos de Uso
  - [ ] LGPD compliance

---

## üìù NOTAS DE DESENVOLVIMENTO

### PADR√ïES ESTABELECIDOS
- ‚úÖ **Componentes**: Reutiliz√°veis em `/src/components`, espec√≠ficos em `/src/app/[route]/components`
- ‚úÖ **Styling**: Tailwind + SCSS Modules para casos complexos
- ‚úÖ **Types**: TypeScript strict em todos os arquivos
- ‚úÖ **Validation**: Zod schemas para forms e API
- ‚úÖ **Database**: Prisma com relacionamentos bem definidos

### DECIS√ïES ARQUITETURAIS
- **Auth Strategy**: Auth.js com sess√µes em cookies (melhor SSR)
- **Payment Provider**: Stripe com webhooks para sincroniza√ß√£o
- **Database**: PostgreSQL na Neon (serverless, escal√°vel)
- **Deployment**: Vercel (integra√ß√£o nativa Next.js)
- **State Management**: Server Components first, client state m√≠nimo

### PR√ìXIMOS REVIEWS
- **Code Review**: A cada 2 semanas para manter consist√™ncia
- **Security Review**: Antes do deploy de produ√ß√£o
- **Performance Review**: Ap√≥s implementar features pesadas (v√≠deo, chat)
- **UX Review**: Com usu√°rios beta ap√≥s MVP

---

## üéØ OBJETIVOS SEMANAIS

### Semana Atual (8-15 Set)
1. Completar middleware de autentica√ß√£o com RBAC
2. Criar dashboard layout b√°sico
3. Implementar CRUD de usu√°rios no dashboard

### Pr√≥xima Semana (16-23 Set)  
1. Sistema de upload e gest√£o de aulas
2. Player de v√≠deo com tracking de progresso
3. Interface de coment√°rios nas aulas

### Meta do M√™s (Setembro)
**MVP Funcional**: Admin pode criar aulas, usu√°rios podem assistir e pagar, progresso √© trackado.

---

*√öltima atualiza√ß√£o: 8 de setembro de 2025 por Jean Dias*  
*Para sugest√µes ou modifica√ß√µes, abrir issue no GitHub.*

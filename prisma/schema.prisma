generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Novo modelo para assinaturas
model subscription {
  id                  String   @id @default(uuid())
  userId              String
  stripeSubscriptionId String  @unique
  stripePriceId       String
  status              String   // active, canceled, etc
  currentPeriodStart  DateTime
  currentPeriodEnd    DateTime
  cancelAtPeriodEnd   Boolean  @default(false) // Novo campo
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  user                user     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([stripeSubscriptionId])
}

model account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              user    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model user {
  id                       String              @id @default(uuid())
  branchId                 String
  nickname                 String
  role                     UserRole            @default(CUSTOMER)
  email                    String              @unique
  emailVerified            DateTime?
  emailVerificationExpires DateTime?
  emailVerificationToken   String?
  password                 String?
  resetPasswordExpires     DateTime?
  resetPasswordToken       String?
  isActive                 Boolean             @default(false)
  createdAt                DateTime            @default(now())
  updatedAt                DateTime            @updatedAt
  accounts                 account[]
  classMembers             classMembers[]
  classes                  classes[]
  lessonComments           lessonComments[]
  lessonEnrollments        lessonEnrollments[]
  lessonProgress           lessonProgress[]
  lessons                  lessons[]
  sessions                 Session[]
  userAchievements         userAchievements[]
  subscriptions            subscription[]
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         user     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
  @@index([userId])
}

model lessonCategory {
  id          String      @id @default(uuid())
  name        String
  description String?
  slug        String      @unique @default("default-slug")
  icon        String?
  level       LessonLevel @default(INICIANTE)
  lessons     lessons[]
}

model lessons {
  id           String              @id @default(uuid())
  title        String
  description  String?
  number       Int?                // Mantido como nullable conforme banco atual
  categoryId   String
  videoUrl     String?
  thumbnailUrl String?
  isLive       Boolean             @default(false)
  isLocked     Boolean             @default(false)
  isCompleted  Boolean             @default(false) // Mantido conforme banco atual
  duration     Int?
  scheduledAt  DateTime?
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  createdById  String
  comments     lessonComments[]
  enrollments  lessonEnrollments[]
  progress     lessonProgress[]
  category     lessonCategory      @relation(fields: [categoryId], references: [id])
  createdBy    user                @relation(fields: [createdById], references: [id])
  classes      classes[]           @relation("classesTolessons")

  @@index([categoryId])
  @@index([createdById])
}

model lessonEnrollments {
  id       String   @id @default(uuid())
  userId   String
  lessonId String
  joinedAt DateTime @default(now())
  lesson   lessons  @relation(fields: [lessonId], references: [id])
  user     user     @relation(fields: [userId], references: [id])

  @@unique([userId, lessonId])
  @@index([userId])
  @@index([lessonId])
}

model classes {
  id          String         @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  createdById String
  members     classMembers[]
  createdBy   user           @relation(fields: [createdById], references: [id])
  lessons     lessons[]      @relation("classesTolessons")

  @@index([createdById])
}

model classMembers {
  id       String   @id @default(uuid())
  userId   String
  classId  String
  joinedAt DateTime @default(now())
  class    classes  @relation(fields: [classId], references: [id])
  user     user     @relation(fields: [userId], references: [id])

  @@unique([userId, classId])
  @@index([userId])
  @@index([classId])
}

model lessonComments {
  id        String   @id @default(uuid())
  userId    String
  lessonId  String
  content   String
  createdAt DateTime @default(now())
  lesson    lessons  @relation(fields: [lessonId], references: [id])
  user      user     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([lessonId])
}

model lessonProgress {
  id        String   @id @default(uuid())
  userId    String
  lessonId  String
  completed Boolean  @default(false)
  progress  Float?
  updatedAt DateTime @updatedAt
  lesson    lessons  @relation(fields: [lessonId], references: [id])
  user      user     @relation(fields: [userId], references: [id])

  @@unique([userId, lessonId])
  @@index([userId])
  @@index([lessonId])
}

model achievements {
  id               String             @id @default(uuid())
  title            String
  description      String?
  iconUrl          String?
  createdAt        DateTime           @default(now())
  userAchievements userAchievements[]
}

model userAchievements {
  id            String       @id @default(uuid())
  userId        String
  achievementId String
  awardedAt     DateTime     @default(now())
  achievement   achievements @relation(fields: [achievementId], references: [id])
  user          user         @relation(fields: [userId], references: [id])

  @@unique([userId, achievementId])
  @@index([userId])
  @@index([achievementId])
}

model agents {
  id         String          @id @default(uuid())
  name       String          @unique
  roleId     String
  biography  String?
  dica       String?
  imageKey   String?
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  skills     AgentSkill[]
  strategies AgentStrategy[]
  tutorials  AgentTutorial[]
  role       agentRoles      @relation("AgentToRole", fields: [roleId], references: [id])

  @@index([roleId])
}

model AgentSkill {
  id          String  @id @default(uuid())
  agentId     String
  name        String
  key         String
  description String
  iconUrl     String?
  agent       agents  @relation(fields: [agentId], references: [id])

  @@index([agentId])
}

model AgentStrategy {
  id        String   @id @default(uuid())
  agentId   String
  title     String
  content   String
  createdAt DateTime @default(now())
  agent     agents   @relation(fields: [agentId], references: [id])

  @@index([agentId])
}

model AgentTutorial {
  id        String       @id @default(uuid())
  agentId   String
  title     String
  url       String
  type      TutorialType @default(VIDEO)
  createdAt DateTime     @default(now())
  agent     agents       @relation(fields: [agentId], references: [id])

  @@index([agentId])
}

model agentRoles {
  id          String   @id @default(uuid())
  name        String   @unique
  slug        String   @unique
  description String?
  iconUrl     String?
  color       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  agents      agents[] @relation("AgentToRole")
}

model maps {
  id          String         @id @default(uuid())
  name        String         @unique
  description String?
  imageKey    String?
  minimapUrl  String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  callouts    mapCallouts[]
  sites       mapSites[]
  tips        mapTips[]
  tutorials   mapTutorials[]
}

model mapSites {
  id          String  @id @default(uuid())
  mapId       String
  name        String
  description String?
  map         maps    @relation(fields: [mapId], references: [id])

  @@index([mapId])
}

model mapCallouts {
  id          String  @id @default(uuid())
  mapId       String
  name        String
  description String?
  locationX   Float?
  locationY   Float?
  map         maps    @relation(fields: [mapId], references: [id])

  @@index([mapId])
}

model mapTips {
  id      String @id @default(uuid())
  mapId   String
  title   String
  content String
  map     maps   @relation(fields: [mapId], references: [id])

  @@index([mapId])
}

model mapTutorials {
  id    String       @id @default(uuid())
  mapId String
  title String
  url   String
  type  TutorialType @default(VIDEO)
  map   maps         @relation(fields: [mapId], references: [id])

  @@index([mapId])
}

enum LessonLevel {
  INICIANTE
  INTERMEDIARIO
  AVANCADO      @map("AVANÃ‡ADO") // Nome interno vs nome no banco
  IMORTAL
}

enum UserRole {
  CUSTOMER
  ADMIN
  PROFESSIONAL
}

enum LessonCategory {
  AIM
  MAPS
  STRATEGY
  AGENTS
}

enum TutorialType {
  VIDEO
  ARTICLE
  GUIDE
}